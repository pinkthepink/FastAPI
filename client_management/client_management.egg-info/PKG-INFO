Metadata-Version: 2.4
Name: client_management
Version: 0.1.0
Summary: FastAPI Client Management API
Description-Content-Type: text/markdown

# Client Management API

A FastAPI application for client management with authentication.

## Project Structure

```
client_management/
├── app/
│   ├── __init__.py
│   ├── main.py             # FastAPI application entry point
│   ├── core/               # Core functionality
│   │   ├── __init__.py
│   │   ├── config.py       # Configuration settings
│   │   └── security.py     # Security utilities
│   ├── models/             # SQLAlchemy models
│   │   ├── __init__.py
│   │   ├── user.py
│   │   └── client.py
│   ├── schemas/            # Pydantic schemas
│   │   ├── __init__.py
│   │   ├── user.py
│   │   └── client.py
│   ├── crud/               # CRUD operations
│   │   ├── __init__.py
│   │   ├── base.py
│   │   ├── user.py
│   │   └── client.py
│   ├── api/                # API endpoints
│   │   ├── __init__.py
│   │   ├── deps.py
│   │   └── v1/
│   │       ├── __init__.py
│   │       ├── api.py
│   │       └── endpoints/
│   │           ├── __init__.py
│   │           ├── auth.py
│   │           ├── users.py
│   │           └── clients.py
│   └── db/                 # Database
│       ├── __init__.py
│       ├── base.py
│       └── session.py
├── alembic/                # Database migrations
│   ├── versions/
│   └── env.py
├── tests/                  # Tests
│   ├── conftest.py
│   └── api/
│       └── test_auth.py
├── .env                    # Environment variables
├── alembic.ini             # Alembic configuration
└── requirements.txt        # Dependencies
```

## Features

- FastAPI with async support
- PostgreSQL with SQLAlchemy ORM and asyncpg
- Alembic for database migrations
- JWT token authentication
- User management (signup, login, profile)
- Client management (CRUD operations)
- Role-based access control
- Testing with pytest
- Dependency injection

## Getting Started

### Prerequisites

- Python 3.7+
- PostgreSQL

### Installation

1. Clone the repository
2. Create and activate a virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # On Windows, use: venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

4. Configure environment variables:
Copy `.env.example` to `.env` and update the values to match your environment.

5. Initialize the database:
```bash
alembic revision --autogenerate -m "Initial migration"
alembic upgrade head
```

6. Run the application:
```bash
uvicorn app.main:app --reload
```

The API will be available at `http://localhost:8000`.

## API Documentation

- Swagger UI: `http://localhost:8000/docs`
- ReDoc: `http://localhost:8000/redoc`

## Testing

Run the tests with pytest:

```bash
pytest
```

## License

MIT
